//James Roesemann
//HW2 Question 2

	// for this program i know that we are suposed to ask the user for the day the first of january fell on, as well as the year, but that seams kind of unreasonable. i know the first of january 1900 is a pretty consistant date used in these kinds of programs, so im going to be basing everything off of that date, and just ignore whatever the user tell me the first is.
	//see if i can add functonality later for years before 1900 and posibly before ce
	// you know what, inorder to build this i need to build what he aked for anyway, let me try that first and if i have time i can add to it.
import java.util.*;
import java.math.*;

public class MyCalender{
	
	public static void main(String args[]){
		MyCalender Go = new MyCalender();
		Go.go();
	}
	void go(){
		FirstDay firstOfWeek = new FirstDay();
		firstOfWeek=enteredDate();
		//testing
		int currentMonth;
		while(firstOfWeek.currentMonth<13){
			system.out.println("");
			monthHeader(firstOfWeek);
			currentMonth=firstOfWeek.currentMonth;
			while(firstOfWeek.currentMonth==currentMonth){
				firstOfWeek=weekHeader(firstOfWeek);
			}
		}
		
	}
	
	class FirstDay{
		//year denotes the current year
		//first day the first calender day of the week, with sundaybeing the norm and only changing when the month changes. values of first day: 0 for sunday, 1 for monday, 2 for tuesday, 3 for wedensday, 4 for thursday, 5 for friday and 6 for saturday.
		// days in month denotes the number of days in the current month that will be compared with current day.
		//current day records the number day of the first day of the week.
		//current month den otes the current month, set 1-12.
		int year;
		int weekDay;
		int daysInMonth;
		int currentDay;
		int currentMonth;
		}
	
	//this is a method to check a switch statment to see of the entered ext matches any day of the week.
	int CorrectDay(String readIn){
	//I was going to put in every possible spelling of every day, but i'm not a masochist.
	//returns 0 for sunday, 1 for monday, 2 for tuesday, 3 for wedensday, 4 for thursday, 5 for friday and 6 for saturday.
		switch(readIn){
			case "Sunday": return 0;
			case "Monday": return 1;
			case "Tuesday": return 2;
			case "Wednesday": return 3;
			case "Thursday": return 4;
			case "Friday": return 5;
			case "Saturday": return 6; 
			default: { 
				System.out.println("You did not enter i day I recognized.");
				System.exit(1);
				return 7;
				}
		}
	
	}
					
	// receives the entered year and what day the first of January falls on.
	FirstDay enteredDate(){
		FirstDay jan1 = new FirstDay();
		Scanner readIn = new Scanner(System.in);
			System.out.println("Please enter the year you want to see?");
			if(readIn.hasNextInt()){
				jan1.year=readIn.nextInt();
			}
			else{
				System.out.println("I did not recognize that as a year.");
				System.exit(1);
			}
		System.out.println("Now enter the day of the week the first of January falls on.");
		jan1.weekDay=CorrectDay(readIn.next());
		jan1.daysInMonth=31;
		jan1.currentDay=1;
		jan1.currentMonth=1;
		return jan1;
		}

		//what do i need to do now

		//fuck git didnt save my work, now i have to rewrite everything
		//write template for month header, then method for week header
		//then write a method for changeing the values of the month, that also resets the current day, that also resets month variables if the month ends.

	void monthHeader(FirstDay firstOfWeek){
		// ill format the month names latter
		String monthName="";
		switch(firstOfWeek.currentMonth){
			case 1: monthName="January";
				break;
			case 2: monthName="February";
				break;
			case 3: monthName="March";
				break;
			case 4: monthName="April";
				break;
			case 5: monthName="May";
				break;
			case 6: monthName="June";
				break;
			case 7: monthName="July";
				break;
			case 8: monthName="August";
				break;
			case 9: monthName="September";
				break;
			case 10: monthName="October";
				break;
			case 11: monthName="November";
				break;
			case 12: monthName="December";
				break;
			default:System.out.println("something went wrong");
				System.exit(1);
				break;
		}
		System.out.printf("%5d", firstOfWeek.year);
		System.out.printf("%16s\n", monthName);
		System.out.printf("%3s", "SU");
		System.out.printf("%3s", "MO");
		System.out.printf("%3s", "TU");
		System.out.printf("%3s", "WE");
		System.out.printf("%3s", "TH");
		System.out.printf("%3s", "FR");
		System.out.printf("%3s\n", "SA");
	}
	//method for wthe week header format// returns the value of the firstOfWeek
	FirstDay weekHeader(FirstDay firstOfWeek){
		String[] dayBox ={ "-","-","-","-","-","-","-"};
		
		dayBox=weekValues(dayBox, firstOfWeek);
		for(int i=0; i<7; i++){
			System.out.printf("%3s", dayBox[i]);
		}
		System.out.printf("\n");
		//put in the otherstuff to change the falue of first of week here
		firstOfWeek=setDay(firstOfWeek);
		return firstOfWeek;
	}
				
	//method to set the variables of the week
	String[] weekValues(String[] dayBox, FirstDay firstOfWeek){
		int currentDay=firstOfWeek.currentDay;
		for(int i=firstOfWeek.weekDay; i<7; i++){
			dayBox[i]=currentDay+"";
			currentDay++;
			// i know this should be put in the condition of the for loop, but for some reason i get thrown an out of bouds exceptioon here and I can't figure out why, so i'm just sticking this here because it works.
			if(currentDay>firstOfWeek.daysInMonth) i=7;

		}
		return dayBox;
	}
	// method to set the next first day of the week
	//
	FirstDay setDay(FirstDay firstOfWeek){
		for(int i=firstOfWeek.weekDay; i<7; i++){
			if(firstOfWeek.currentDay==firstOfWeek.daysInMonth){
				firstOfWeek.currentDay=1;
				firstOfWeek.currentMonth++;
				if(firstOfWeek.currentMonth==13) return firstOfWeek;
				//determine number of days in the month, add in a thing for leapyear later.
				if(firstOfWeek.currentMonth==1 || firstOfWeek.currentMonth==3 || firstOfWeek.currentMonth==5 || firstOfWeek.currentMonth==7 || firstOfWeek.currentMonth==8 || firstOfWeek.currentMonth==10 || firstOfWeek.currentMonth==12){
					firstOfWeek.daysInMonth=31;
				}
				else if(firstOfWeek.currentMonth==4 || firstOfWeek.currentMonth==6 || firstOfWeek.currentMonth==9 || firstOfWeek.currentMonth==11){
					firstOfWeek.daysInMonth=30;
				}
				else{
					firstOfWeek.daysInMonth=28;
				}
				if(firstOfWeek.weekDay<6) firstOfWeek.weekDay++;
				else firstOfWeek.weekDay=0;	
				return firstOfWeek;
			}
			else{
				firstOfWeek.currentDay++;
			}
		}
		firstOfWeek.weekDay=0;
		return firstOfWeek;
	}
			
	

}
